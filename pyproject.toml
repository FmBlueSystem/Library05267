[project]
name = "nueva-biblioteca"
version = "1.0.0"
description = "Sistema de biblioteca musical con playlists inteligentes"
authors = [
    { name = "FmBlueSystem", email = "info@fmbluesystem.com" }
]
dependencies = [
    "PyQt6>=6.6.0",
    "librosa>=0.10.0",
    "mutagen>=1.45.1",
    "SQLAlchemy>=2.0.0",
    "aiosqlite>=0.19.0",
    "sounddevice>=0.4.6",
    "numpy>=1.24.0",
    "scikit-learn>=1.3.0",
    "python-magic>=0.4.27",
]
requires-python = ">=3.11"
readme = "README.md"
license = { file = "LICENSE" }

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.10.0",
    "pytest-asyncio>=0.21.0",
    "pytest-qt>=4.2.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.3.0",
    "types-setuptools>=67.8.0",
    "typing_extensions>=4.7.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "myst-parser>=2.0.0",
    "sphinx-autobuild>=2021.3.14",
    "sphinx-copybutton>=0.5.2",
    "sphinx-design>=0.5.0",
]
build = [
    "build>=1.0.0",
    "pyinstaller>=6.0.0",
    "wheel>=0.40.0",
    "twine>=4.0.0",
    "uv>=0.1.0",
]
performance = [
    "orjson>=3.9.0",
    "uvloop>=0.17.0; sys_platform != 'win32'",
]
gui = [
    "PyQt6-Charts>=6.6.0",
    "PyQt6-WebEngine>=6.6.0",
]
audio = [
    "pyDynaMix>=1.2.0",
    "essentia>=2.1.0",
    "aubio>=0.4.9",
]
full = [
    "nueva-biblioteca[dev,docs,build,performance,gui,audio]",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
line-length = 88
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle
    "F",  # pyflakes
    "I",  # isort
    "N",  # naming
    "UP", # pyupgrade
    "YTT", # flake8-2020
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "ERA", # eradicate
    "PIE", # flake8-pie
    "PLE", # pylint errors
    "PLW", # pylint warnings
    "RUF", # ruff-specific rules
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]  # Allow assert in tests

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_decorators = false

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --cov=nueva_biblioteca --cov-report=term-missing"
testpaths = [
    "tests",
]
